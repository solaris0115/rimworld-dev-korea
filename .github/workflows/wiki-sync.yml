name: repo-to-wiki-sync

on:
  push:
    branches: [ main, master ]     # 메인 리포에 커밋되면 자동 실행
  schedule:
    - cron: "*/30 * * * *"         # 30분마다(UTC) 실행
  workflow_dispatch: {}             # 필요시 수동 실행

concurrency:
  group: repo-to-wiki-sync
  cancel-in-progress: true

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: git config
        run: |
          git config --global user.name "wiki-bot"
          git config --global user.email "bot@example.com"

      # 1) 메인 리포 체크아웃 (GITHUB_TOKEN 자격증명 주입 비활성화)
      - name: checkout main repo (source) without credentials
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          persist-credentials: false

      # 2) 소스 디렉터리 선택: wiki > docs > 루트
      - name: choose source dir
        id: srcdir
        run: |
          if [ -d "wiki" ]; then
            echo "dir=wiki" >> "$GITHUB_OUTPUT"
          elif [ -d "docs" ]; then
            echo "dir=docs" >> "$GITHUB_OUTPUT"
          else
            echo "dir=." >> "$GITHUB_OUTPUT"
          fi

      # 3) rsync 규칙: md/위키 기본 파일/이미지 만 포함, 작업 폴더 명시 제외
      - name: build rsync rules (wiki md + images only)
        run: |
          printf "%s\n" \
            "- .git/***" \
            "- .github/***" \
            "- node_modules/***" \
            "- build/***" \
            "- dist/***" \
            "- out/***" \
            "- .wiki/***" \
            "- _src/***" \
            "- rsync.rules" \
            "+ */" \
            "+ *.md" \
            "+ _Sidebar.md" \
            "+ _Footer.md" \
            "+ _Header.md" \
            "+ _*.*" \
            "+ _images/***" \
            "+ *.png" "+ *.jpg" "+ *.jpeg" "+ *.gif" "+ *.svg" "+ *.webp" "+ *.bmp" "+ *.ico" \
            "- *" > rsync.rules
          cat rsync.rules

      # 4) 소스 스냅샷 생성 (아직 .wiki 없음)
      - name: snapshot source to _src
        run: |
          rm -rf _src && mkdir _src
          rsync -av --prune-empty-dirs --filter="merge rsync.rules" "${{ steps.srcdir.outputs.dir }}/" _src/

      # 5) 파일/폴더명에 ':' 있으면 '-'로 치환
      - name: sanitize filenames in _src (':' -> '-')
        run: |
          find _src -depth -name '*:*' | while read -r f; do
            safe="$(echo "$f" | sed 's/:/-/g')"
            if [ "$f" != "$safe" ]; then
              echo "Renaming: $f -> $safe"
              mkdir -p "$(dirname "$safe")"
              mv "$f" "$safe"
            fi
          done

      # 6) 위키 저장소를 서브폴더 .wiki/ 에 클론 (항상 최신 기준으로 작업 시작)
      - name: clone wiki repo into .wiki
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}   # Fine-grained PAT (Contents: Read/Write)
        run: |
          rm -rf .wiki
          TGT_URL="https://${GH_TOKEN}@github.com/solaris0115/rimworld-dev-korea.wiki.git"
          echo "Cloning target: $TGT_URL"
          git clone "$TGT_URL" .wiki
          cd .wiki
          git fetch origin master || true
          git checkout -B master || git checkout master
          git reset --hard origin/master || true

      # 7) 스냅샷을 위키 워크트리(.wiki/)에 적용 (삭제 포함)
      - name: sync snapshot to .wiki (full, delete)
        run: |
          rsync -av --delete --prune-empty-dirs _src/ .wiki/

      # 8) PAT 원격 보장 및 상태 출력
      - name: ensure PAT remote and show status
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          cd .wiki
          git config --global --unset-all http.https://github.com/.extraheader || true
          git remote set-url origin "https://${GH_TOKEN}@github.com/solaris0115/rimworld-dev-korea.wiki.git"
          git remote -v
          git status --porcelain || true

      # 9) 커밋 생성(있을 때만)
      - name: commit if changes
        id: commit
        run: |
          cd .wiki
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "docs(wiki): sync from main repo ($(date -u +%Y-%m-%dT%H:%M:%SZ))"
            echo "committed=yes" >> "$GITHUB_OUTPUT"
          else
            echo "committed=no" >> "$GITHUB_OUTPUT"
          fi

      # 10) non-ff 자동 복구: 원격 최신으로 hard reset → 스냅샷 재적용 → 재커밋 → 재푸시
      - name: push wiki (non-ff recovery loop)
        if: steps.commit.outputs.committed == 'yes'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          set -e
          cd .wiki

          attempt_push() {
            echo "Attempting push..."
            if git push origin master; then
              echo "Push OK"
              return 0
            fi

            echo "Non-fast-forward. Refetch & rebuild commit..."
            git fetch origin master || true
            git reset --hard origin/master

            # 스냅샷 재적용
            rsync -av --delete --prune-empty-dirs ../_src/ ./

            # 변경 있으면 재커밋
            if [ -n "$(git status --porcelain)" ]; then
              git add .
              git commit -m "docs(wiki): sync from main repo ($(date -u +%Y-%m-%dT%H:%M:%SZ)) [rebuild]"
            else
              echo "No diff after rebuild; nothing to push."
              return 0
            fi

            git push origin master
          }

          attempt_push || attempt_push || attempt_push
          echo "Done."
