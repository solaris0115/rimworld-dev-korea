name: repo-to-wiki-sync

on:
  push:
    branches: [ main, master ]     # 메인 리포에 커밋되면 자동 실행
  schedule:
    - cron: "*/30 * * * *"         # 30분마다(UTC) 실행
  workflow_dispatch: {}             # 필요시 수동 실행

concurrency:
  group: repo-to-wiki-sync
  cancel-in-progress: true

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: git config
        run: |
          git config --global user.name "wiki-bot"
          git config --global user.email "bot@example.com"

      # 메인 리포 체크아웃 (GITHUB_TOKEN 자격증명 주입 비활성화)
      - name: checkout main repo (source) without credentials
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          persist-credentials: false

      # 소스 디렉토리 선택: wiki > docs > 루트
      - name: choose source dir
        id: srcdir
        run: |
          if [ -d "wiki" ]; then
            echo "dir=wiki" >> "$GITHUB_OUTPUT"
          elif [ -d "docs" ]; then
            echo "dir=docs" >> "$GITHUB_OUTPUT"
          else
            echo "dir=." >> "$GITHUB_OUTPUT"
          fi

      # 타겟 위키 클론 (PAT 사용, 항상 최신으로 맞춰 시작)
      - name: clone target wiki
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}   # Fine-grained PAT (Contents: Read/Write)
        run: |
          TGT_URL="https://${GH_TOKEN}@github.com/solaris0115/rimworld-dev-korea.wiki.git"
          echo "Cloning target: $TGT_URL"
          git clone "$TGT_URL" target.wiki
          cd target.wiki
          git fetch origin master || true
          git checkout -B master || git checkout master
          git reset --hard origin/master || true

      # rsync 규칙: 거의 전부 복제 (.git/빌드 아티팩트 제외)
      - name: build rsync rules
        run: |
          printf "%s\n" \
            "- .git/***" \
            "- .github/***" \
            "- .git" \
            "- node_modules/***" \
            "- build/***" \
            "- dist/***" \
            "- out/***" \
            "+ */" \
            "+ *" \
            "- *" > rsync.rules
          cat rsync.rules

      # 소스 임시 복사본 준비
      - name: prepare temp source copy
        run: |
          rm -rf _src && mkdir _src
          rsync -av --prune-empty-dirs --filter="merge rsync.rules" "${{ steps.srcdir.outputs.dir }}/" _src/

      # 파일/폴더명에 ':' 있으면 '-'로 치환
      - name: sanitize filenames in source (':' -> '-')
        run: |
          find _src -depth -name '*:*' | while read -r f; do
            safe="$(echo "$f" | sed 's/:/-/g')"
            if [ "$f" != "$safe" ]; then
              echo "Renaming: $f -> $safe"
              mkdir -p "$(dirname "$safe")"
              mv "$f" "$safe"
            fi
          done

      # 위키 워크트리에 전체 동기화 (삭제 포함)
      - name: sync to wiki worktree
        run: |
          rsync -av --delete --prune-empty-dirs _src/ target.wiki/

      # 원격에 PAT 사용 보장 및 상태 출력
      - name: ensure PAT remote and show status
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          cd target.wiki
          git config --global --unset-all http.https://github.com/.extraheader || true
          git remote set-url origin "https://${GH_TOKEN}@github.com/solaris0115/rimworld-dev-korea.wiki.git"
          git remote -v
          git status --porcelain || true

      # non-ff 대비: push 직전 최신 반영(stash -> rebase/reset -> pop -> commit)
      - name: pre-pull with stash and commit
        id: prepull
        run: |
          cd target.wiki

          # 변경이 있으면 임시 보관
          if [ -n "$(git status --porcelain)" ]; then
            git stash push -u -m "sync-stash" || true
            STASHED=yes
          else
            STASHED=no
          fi
          echo "stashed=$STASHED" >> "$GITHUB_OUTPUT"

          # 원격 최신 반영
          git fetch origin master || true
          git rebase origin/master || git reset --hard origin/master

          # 스태시 복원(있으면)
          if [ "$STASHED" = "yes" ]; then
            git stash pop || true
          fi

          # 복원 후 변경 있으면 커밋
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "docs(wiki): sync from main repo ($(date -u +%Y-%m-%dT%H:%M:%SZ))"
            echo "committed=yes" >> "$GITHUB_OUTPUT"
          else
            echo "committed=no" >> "$GITHUB_OUTPUT"
          fi

      # 푸시
      - name: push wiki
        if: steps.prepull.outputs.committed == 'yes'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          cd target.wiki
          git push origin master
