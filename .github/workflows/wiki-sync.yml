name: repo-to-wiki-sync

on:
  push:
    branches: [ main, master ]   # 메인 리포에 커밋 생기면 실행
  schedule:
    - cron: "*/30 * * * *"       # 30분마다(UTC) 실행
  workflow_dispatch: {}           # 수동 실행도 가능

concurrency:
  group: repo-to-wiki-sync
  cancel-in-progress: true

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: git config
        run: |
          git config --global user.name "wiki-bot"
          git config --global user.email "bot@example.com"

      - name: checkout main repo (source)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: choose source dir (wiki > docs > root)
        id: srcdir
        run: |
          if [ -d "wiki" ]; then
            echo "dir=wiki" >> "$GITHUB_OUTPUT"
          elif [ -d "docs" ]; then
            echo "dir=docs" >> "$GITHUB_OUTPUT"
          else
            echo "dir=." >> "$GITHUB_OUTPUT"
          fi
          echo "Using source dir: $(cat $GITHUB_OUTPUT)"

      - name: clone target wiki
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}   # Fine-grained PAT (Contents: Read/Write)
        run: |
          TGT_URL="https://${GH_TOKEN}@github.com/solaris0115/rimworld-dev-korea.wiki.git"
          echo "Cloning target: $TGT_URL"
          git clone "$TGT_URL" target.wiki

      - name: build rsync rules (copy everything except obvious VCS/build dirs)
        run: |
          printf "%s\n" \
            "- .git/***" \
            "- .github/***" \
            "- .git" \
            "- node_modules/***" \
            "- build/***" \
            "- dist/***" \
            "- out/***" \
            "+ */" \
            "+ *" \
            "- *" > rsync.rules
          cat rsync.rules

      - name: prepare a temp source copy
        run: |
          rm -rf _src && mkdir _src
          rsync -av --prune-empty-dirs --filter="merge rsync.rules" "${{ steps.srcdir.outputs.dir }}/" _src/

      - name: sanitize filenames (':' -> '-') in source
        run: |
          find _src -depth -name '*:*' | while read -r f; do
            safe="$(echo "$f" | sed 's/:/-/g')"
            if [ "$f" != "$safe" ]; then
              echo "Renaming: $f -> $safe"
              mkdir -p "$(dirname "$safe")"
              mv "$f" "$safe"
            fi
          done

      - name: sync to wiki (full, with delete)
        run: |
          rsync -av --delete --prune-empty-dirs _src/ target.wiki/

      - name: commit if changes
        id: commit
        run: |
          cd target.wiki
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "docs(wiki): sync from main repo ($(date -u +%Y-%m-%dT%H:%M:%SZ))"
            echo "committed=yes" >> "$GITHUB_OUTPUT"
          else
            echo "committed=no" >> "$GITHUB_OUTPUT"
          fi

      - name: push wiki
        if: steps.commit.outputs.committed == 'yes'
        run: |
          cd target.wiki
          git push origin master   # 위키 기본 브랜치
